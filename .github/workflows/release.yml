name: Releases

on:
  push:
    tags:
      - .*

jobs:

  prod:
    name: Build production image
    runs-on: ubuntu-latest

    steps:
      - name: Wait for tests
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-tests
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Run tests
          ref: ${{ github.ref }}
          timeoutSeconds: 2400

      - name: Fail the Build
        uses: cutenode/action-always-fail@v1
        if: steps.wait-for-tests.outputs.conclusion != 'success'

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker

      - name: Get cached docker images
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
        with:
          key: docker-${{ runner.os }}-base-${{ hashFiles(format('{0}{1}', github.workspace, '/Dockerfile.base')) }}-prod-${{ hashFiles(format('{0}{1}', github.workspace, '/Dockerfile.prod')) }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: |
            docker-${{ runner.os }}-base-${{ hashFiles(format('{0}{1}', github.workspace, '/Dockerfile.base')) }}-prod-${{ hashFiles(format('{0}{1}', github.workspace, '/Dockerfile.prod')) }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
            docker-${{ runner.os }}-base-${{ hashFiles(format('{0}{1}', github.workspace, '/Dockerfile.base')) }}-prod-${{ hashFiles(format('{0}{1}', github.workspace, '/Dockerfile.prod')) }}
            docker-${{ runner.os }}-base-${{ hashFiles(format('{0}{1}', github.workspace, '/Dockerfile.base')) }}
            docker-${{ runner.os }}-base

      - name: Login to DockerHub
        run: docker login -u  ${{ secrets.DOCKERHUB_USERNAME }} -p "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Load images from cache
        run: 'docker load -i docker_images/images.tar || true'

      - name: Build base image
        run: docker build -t dolfinus/arkenston-backend:base --compress -f ${{ github.workspace }}/Dockerfile.base ${{ github.workspace }}

      - name: Build production image
        run: docker build -t dolfinus/arkenston-backend:${{ env.GITHUB_REF_SLUG }} --compress -f ${{ github.workspace }}/Dockerfile.prod ${{ github.workspace }}

      - name: Push production image
        run: |
          docker push dolfinus/arkenston-backend:${{ env.GITHUB_REF_SLUG }}
          docker tag dolfinus/arkenston-backend:${{ env.GITHUB_REF_SLUG }} dolfinus/arkenston-backend:latest
          docker push dolfinus/arkenston-backend:latest

      - name: Logout from DockerHub
        run: docker logout

  schema:
    name: Upload GraphQL schema
    runs-on: ubuntu-latest
    needs: [prod]

    steps:

      - name: Download artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: test.yml
          workflow_conclusion: success
          name: graphql-schema
          path: ./graphql/
#
#      - name: Create release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ github.ref }}
#          draft: false
#          prerelease: false
#
#      - name: Upload GraphQL JSON schema
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./graphql/schema.json
#          asset_name: schema.json
#          asset_content_type: application/json
#
#      - name: Upload GraphQL SDL schema
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./graphql/schema.graphql
#          asset_name: schema.graphql
#          asset_content_type: application/graphql
