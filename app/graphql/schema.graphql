input CreateUserInput {
  email: String!
  name: String!
  password: String!
  role: UserRole
  translations: [UserTranslationInput]!
}

type EntityVersion {
  author: User
  created_at: String
  event: String!
  id: ID!
  object: String
  whodunnit: ID
}

"""
The connection type for EntityVersion.
"""
type EntityVersionConnection {
  """
  A list of edges.
  """
  edges: [EntityVersionEdge]
  page_info: PageInfo
  total_count: Int!
}

"""
An edge in a connection.
"""
type EntityVersionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EntityVersion
}

type Mutation {
  createUser(input: CreateUserInput!): User
  deleteUser(email: String, id: ID, name: String): Boolean
  updateUser(email: String, id: ID, input: UpdateUserInput!, name: String): User
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  end_cursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating forwards, are there more items?
  """
  has_next_page: Boolean!

  """
  When paginating backwards, are there more items?
  """
  has_previous_page: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating backwards, the cursor to continue.
  """
  start_cursor: String
}

type Query {
  refreshToken(token: String): RefreshToken
  signIn(email: String, id: ID, name: String, password: String): SignIn
  user(email: String, id: ID, name: String): User
  users(after: ID, before: ID, first: Int, last: Int): UserConnection
}

type RefreshToken {
  access_token: String
  refresh_token: String
}

type SignIn {
  refresh_token: String
}

input UpdateUserInput {
  email: String
  password: String
  role: UserRole
  translations: [UserTranslationInput]
}

type User {
  created_at: String!
  email: String!
  id: ID!
  name: String!
  remember_token: String!
  role: String
  translations: [UserTranslation!]
  updated_at: String!
  versions: [EntityVersion!]
  versions_paged(after: ID, before: ID, first: Int, last: Int): EntityVersionConnection
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  page_info: PageInfo
  total_count: Int!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

type UserTranslation {
  created_at: String!
  first_name: String!
  full_name: String
  id: ID!
  last_name: String!
  locale: String!
  middle_name: String!
  updated_at: String!
  versions: [EntityVersion!]
}

input UserTranslationInput {
  first_name: String
  last_name: String
  locale: String!
  middle_name: String
}